class Solution {
    public boolean isAdditiveNumber(String num) {
        int n = num.length();

        for(int i=1;i<=n/2;i++){
            for(int j=i+1;j<n;j++){
                String num1 = num.substring(0,i);
                String num2 = num.substring(i,j);

                if (isValid(num1) && isValid(num2)) {
                    long num3 = Long.parseLong(num1);
                    long num4 = Long.parseLong(num2);
                    if (isAdditive(num3, num4, j, num)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    public static boolean isValid(String str){
        return str.length() == 1 || str.charAt(0) != '0';
    }
    private boolean isAdditive(long num3, long num4, int startIndex, String num)  {
        if (startIndex == num.length()) {
            return true;
        }
        
        long sum = num3 + num4;
        String sumStr = String.valueOf(sum);
        
        if (num.startsWith(sumStr, startIndex)) {
            return isAdditive(num4, sum, startIndex + sumStr.length(), num);
        }
        return false;
    }
}

/*
Example 1:

        Input: "112358"
        Output: true
        Explanation: 
        The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
        1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8

Example 2:

        Input: "199100199"
        Output: true
        Explanation: 
        The additive sequence is: 1, 99, 100, 199. 
        1 + 99 = 100, 99 + 100 = 199
         

Constraints:

        1 <= num.length <= 35
        num consists only of digits.

*/
