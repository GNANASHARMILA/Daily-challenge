class Solution {
    public int maximumNumberOfStringPairs(String[] words) {
        int maxPairs = 0;

        for(int i=0;i<words.length;i++){
            String reversed = reverseString(words[i]);
            for (int j = i + 1; j < words.length; j++) {
                if (reversed.equals(words[j])) {
                    maxPairs++;
                    break;
                }
            }
        }
        return maxPairs;
    }
    public static String reverseString(String s) {
        StringBuilder sb = new StringBuilder();
        for (int i = s.length() - 1; i >= 0; i--) {
            sb.append(s.charAt(i));
        }
        return sb.toString();
    }
}

/*
Example 1:

        Input: words = ["cd","ac","dc","ca","zz"]
        Output: 2
        Explanation: In this example, we can form 2 pair of strings in the following way:
        - We pair the 0th string with the 2nd string, as the reversed string of word[0] is "dc" and is equal to words[2].
        - We pair the 1st string with the 3rd string, as the reversed string of word[1] is "ca" and is equal to words[3].
        It can be proven that 2 is the maximum number of pairs that can be formed.

Example 2:

        Input: words = ["ab","ba","cc"]
        Output: 1
        Explanation: In this example, we can form 1 pair of strings in the following way:
        - We pair the 0th string with the 1st string, as the reversed string of words[1] is "ab" and is equal to words[0].
        It can be proven that 1 is the maximum number of pairs that can be formed.

Example 3:

        Input: words = ["aa","ab"]
        Output: 0
        Explanation: In this example, we are unable to form any pair of strings.

Constraints:

        1 <= words.length <= 50
        words[i].length == 2
        words consists of distinct strings.
        words[i] contains only lowercase English letters.

*/
