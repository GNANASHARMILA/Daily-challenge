import java.util.ArrayList;
import java.util.List;
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        backtrack(result, "", 0, 0, n);
        return result;
    }

    private void backtrack(List<String> result, String str, int open, int close, int n) {
        if (str.length() == n * 2) {
        
            result.add(str);
            return;

        }
        if(open < n){
            backtrack(result, str + "(", open + 1, close, n);
        }
        if(close < open){
            backtrack(result, str + ")", open, close + 1, n);      
        }
    }
}

/*
Example 1:

      Input: n = 3
      Output: ["((()))","(()())","(())()","()(())","()()()"]

Example 2:

      Input: n = 1
      Output: ["()"]
 

Constraints:

      1 <= n <= 8
*/
