class Solution {
    public List<List<String>> partition(String s) {
        int n = s.length();
        boolean[][] isPalindrome = new boolean[n][n];

        for(int i=1;i<=n;i++){
            for(int start=0;start<=n-i;start++){
                int end = start + i - 1;
                isPalindrome[start][end] = (s.charAt(start) == s.charAt(end)) && (i <= 2 || isPalindrome[start + 1][end - 1]);
            }
        }

        List<List<String>> result = new ArrayList<>();
        List<String> currentList = new ArrayList<>();
        partitionHelper(result, currentList, s, 0, isPalindrome);
        return result;
    }

    private static void partitionHelper(List<List<String>> result, List<String> currentList, String s, int start, boolean[][] isPalindrome){
        if(start == s.length()){
            result.add(new ArrayList<>(currentList));
            return;
        }
        for(int end=start;end<s.length();end++){
            if(isPalindrome[start][end]){
                currentList.add(s.substring(start, end + 1));
                partitionHelper(result, currentList, s, end + 1, isPalindrome);
                currentList.remove(currentList.size() - 1);

            }
        }
    }
}

/*
Example 1:

        Input: s = "aab"
        Output: [["a","a","b"],["aa","b"]]

Example 2:

        Input: s = "a"
        Output: [["a"]]
*/
