class Solution {
    public int minCut(String s) {
        int n = s.length();
        int[] minCut = new int[n];
        boolean[][] isPalindrome = new boolean[n][n];

        for(int i=0;i<n;i++){
            minCut[i] = i;
        }
        for(int end=0;end<n;end++){
            for(int start=0;start<=end;start++){
                if(s.charAt(start) == s.charAt(end) && (end - start <= 1 || isPalindrome[start + 1][end - 1])){
                    isPalindrome[start][end] = true;
                    if(start == 0){
                        minCut[end] = 0;

                    }
                    else{
                        minCut[end] = Math.min(minCut[end], minCut[start - 1] + 1);
                    }
                }
            }
        }
        return minCut[n - 1];
    }
}

/*
Example 1:

        Input: 
              s = "aab"
        Output: 
              1
        Explanation: 
              The palindrome partitioning ["aa","b"] could be produced using 1 cut.

Example 2:

        Input: 
              s = "a"
        Output: 
              0
Example 3:

        Input: 
              s = "ab"
        Output: 
              1
*/
