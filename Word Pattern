class Solution {
    public boolean wordPattern(String pattern, String s) {
        String[] words = s.split(" ");
    
    if(pattern.length() != words.length){
        return false;
    }

    String[] charToWord = new String[26]; 
    boolean[] wordToChar = new boolean[26];

    for(int i=0;i<pattern.length();i++){
        char p = pattern.charAt(i);
        String w = words[i];
        int index = p - 'a';

        if(charToWord[index] == null){
            for (int j = 0; j < 26; j++) {
                if (charToWord[j] != null && charToWord[j].equals(w)) {
                    return false; // Word already used by another character
                }
            }
            charToWord[index] = w;
            wordToChar[index] = true;


        }
        else if (!charToWord[index].equals(w)) {
            return false;
        }
    
    }

    return true;
    }
    
    
}

/*
Example 1:

        Input: pattern = "abba", s = "dog cat cat dog"
        Output: true

Example 2:

        Input: pattern = "abba", s = "dog cat cat fish"
        Output: false

Example 3:

        Input: pattern = "aaaa", s = "dog cat cat dog"
        Output: false
         

Constraints:

        1 <= pattern.length <= 300
        pattern contains only lower-case English letters.
        1 <= s.length <= 3000
        s contains only lowercase English letters and spaces ' '.
        s does not contain any leading or trailing spaces.
        All the words in s are separated by a single space.
*/
